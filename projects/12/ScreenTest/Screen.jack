// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

	static boolean color;
	static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
		var int j, powToJ;
		
		let twoToThe = Array.new(16);
		let j = 0;
		let powToJ = 1;
		while (j < 16) {
			let twoToThe[j] = powToJ; // 2^j;
			let j = j + 1;
			let powToJ = powToJ + powToJ;  // powToJ * 2 
		}
		
		let color = true;
		return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
		var int i;
		let i = 16384;
		while (i < 24576) {
			do Memory.poke(i, 0);
			let i = i + 1;
		}
		return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
		var int address, value, bit;
		let address = 16384 + (y*32) + (x/16);
		let bit = x - ((x/16) * 16);
		let value = Memory.peek(address);
		if (color) {
			let value = value | twoToThe[bit];
		} else {
			let value = value & (~twoToThe[bit]);
		}
		do Memory.poke(address, value);
		return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a, b, diff, dx, dy, min, max, minusB;
		let a = 0;
		let b = 0;
		let diff = 0;
		let dx = x2 - x1;
		let dy = y2 - y1;
		let minusB = 1;
		if (dx = 0) {
			let min = Math.min(y1, y2);
			let max = Math.max(y1, y2);
			while (min < max) {
				do Screen.drawPixel(x1, min);
				let min = min + 1;
			}
			return;
		}
		if (dy = 0) {
			let min = Math.min(x1, x2);
			let max = Math.max(x1, x2);
			while (min < max) {
				do Screen.drawPixel(min, y1);
				let min = min + 1;
			}
			return;
		}
		if (dx > 0) { 
			if (dy < 0) {
				let dy = -dy;
				let minusB = -1;
			}
			while ((a < dx) & (b < dy)) {
				do Screen.drawPixel(x1 + a, y1 + (minusB * b));
				if (diff < 0) {
					let a = a + 1;
					let diff = diff + dy;
				} else {
					let b = b + 1;
					let diff = diff - dx;
				}
			}
			return;
		}
		// dx < 0  x2 < x1
		do Screen.drawLine(x2, y2, x1, y1);
		return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int dx;
		let dx = x1;
		while (dx < x2) {
			do Screen.drawLine(dx, y1, dx, y2);
			let dx = dx + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
		var int dy;
		var int square;
		let dy = -r+1;
		while (dy < r) {
			let square = Math.sqrt((r*r) - (dy*dy));
			do Screen.drawLine(cx - square, cy + dy, cx + square, cy + dy);
			let dy = dy + 1;
		}
		return;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
	
	static Array freeList;

    /** Initializes memory parameters. */
    function void init() {
		let freeList = 2048;
		let freeList[0] = 16383 - 2048;		// freeList length
		let freeList[1] = null;			// next freeList
		return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
		var Array memory;
		let memory = 0;
		return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
		var Array memory;
		let memory = 0;
		let memory[address] = value;
		return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
		var Array next;
		var Array block;
		let next = freeList;
		while (~( next = null ) & (next[0] - 2 < size)) {
			let next = next[1];
		}
		if ( next = null ) {
			return null; // failure
		}
		let block = next + next[0] - size;
		let next[0] = next[0] - size - 1;
		let block[-1] = size + 1;
		return block;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
		var Array segment;
		var int next;
		let segment = object - 1;
		let next = freeList[1];
		let freeList[1] = segment;
		let segment[1] = next;
		return;
    }    
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

	field Array data;
	field int length;
	field int maxLen;
	
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		if (maxLength > 0) {
			let data = Array.new(maxLength);
		}
		let length = 0;
		let maxLen = maxLength;
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		if (maxLen > 0) {
			do data.dispose();
		}
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		if (~(j < maxLen)) {
			return 0;
		}
		return data[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		if (j < maxLen) {
			let data[j] = c;
		}
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		if (maxLen > length) {
			do setCharAt(length, c);
			let length = length + 1;
		}
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int v, i, d;
		var boolean sign;
		let sign = false;
		let v = 0;
		let i = 0;
		if ((length > 0) & (charAt(0) = 45)) {
			let sign = true;
			let i = 1;
		}
		while (i < length) {
			let d = charAt(i) - 48;
			if ((d < 0) | (d > 9)) {
				return v;
			}
			let v = v*10 + d;
			let i = i + 1;
		}
		if (sign) {
			return -v;
		}
		return v;
    }
	
	method void intToString(int number) {
		var int lastDigit;
		var int c;
		let lastDigit =  number - ((number/10) * 10);
		let c = lastDigit + 48;
		if (~(number < 10)) {
			do intToString(number/10);
		}
		do appendChar(c);
		return;
	}

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		let length = 0;
		if (number < 0) {
			let number = -number;
			do appendChar(45);
		}
		do intToString(number);
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
